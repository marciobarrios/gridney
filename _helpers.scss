// =========================================================================
// Functions/mixins used by gridney
// =========================================================================

// function to calculate the width of each column
// respect of the total columns
// =========================================================================
@function fraction($size: $column of $columns) {
  $column:  nth($size, 1);
  $columns: nth($size, 3);

  @return $column/$columns * 100%; // percentage();
}

// Check if a list contains a value
// =========================================================================
@function contains($list, $value) {
  @if type-of($list) == list { @return not not index($list, $value); }
  @else { @return $list == $value; }
}

// Convert px to ems
// =========================================================================
@function toEm($px) {
  @return $px / 16 * 1em; //16 is the usual base
}

// This is to emulate a key/value list
// Given 2 lists, search a value for an item based on the position
// =========================================================================
@function getValue($list-key, $list-val, $item) {
    $n1: index($list-key, $item);
    $n2: index($list-val, $item);

    @if($n1) {
        @return nth($list-val, $n1);
    } @else {
        @return nth($list-key, $n2);
    }
}

// Find the greatest common factor of two integers
// =========================================================================
@function gcf($a, $b) {
  @if $b == 0 { @return $a; }
  @else { @return gcf($b, $a % $b) }
}

// Generate mediaquery declaration for a given breakpoint
// =========================================================================
@mixin mediaquery($i) {

  $breakpoint-prop: nth($breakpoints, $i);
  $mq: null;

  @if length($breakpoint-prop) == 2 { // without shortcut
    $mq: nth($breakpoint-prop, 2);
  }
  @else if length($breakpoint-prop) == 3 { // with shortcut
    $mq: nth($breakpoint-prop, 3);
  }

  @media only screen and #{$mq} { @content; }

}

// col size generator
// =========================================================================
@mixin gridney-column($size: $column of $columns) {
  $column:  nth($size, 1);
  $columns: nth($size, 3);

  @extend %col;
  width: fraction($column of $columns);
}

// Widths generator
// =========================================================================
@mixin build-sizes($breakpoint-name: null) {

  $breakpoint-shortcut: null;

  // Find shortcut name of this breakpoint (if exists),
  // the positions of every breakpoint properties:
  // 1 -> name, 2 -> shortcut?, 3 -> mediaquery
  @each $l in $breakpoints {
    @if length($l) == 3 and nth($l, 1) == $breakpoint-name {
      $breakpoint-shortcut: nth($l, 2);
    }
  }

  // Generate the "hide" classes
  .hide { display: none; }
  @if $breakpoint-name {
    .hide-on-#{$breakpoint-name} { display: none; }
    @if $breakpoint-shortcut {
      .hide-on-#{$breakpoint-shortcut} { @extend .hide-on-#{$breakpoint-name}; }
    }
  }

  // generate all the classes (.g-?of?, .g-?of?--breakpoint...)
  @for $i from 1 through $proportions-limit {
    @for $j from 1 through $i {

      // the part of the selector that defines the proportion
      $selector-base: ".g-#{$j}of#{$i}";

      // Generate sizes for current media and it shortcut
      @if $breakpoint-name { // sizes inside mediaqueries

        // generate the entire selector
        $selector: "#{$selector-base}--#{$breakpoint-name}";

        // Generate the rule
        #{$selector} { width: fraction($j of $i); }

        // if there is shortchut, we generate it
        @if $breakpoint-shortcut {
          #{$selector-base}--#{$breakpoint-shortcut} { @extend #{$selector}; }
        }

        // 2 more readable sizes (.g-all--breakpoint and .g-half--breakpoint)
        @if $i == 1 and $j == 1 {
          .g-all--#{$breakpoint-name} { @extend #{$selector}; }
          @if $breakpoint-shortcut {
            .g-all--#{$breakpoint-shortcut} { @extend #{$selector}; }
          }
        }
        @if $j == 1 and $i == 2 {
          .g-half--#{$breakpoint-name} { @extend #{$selector}; }
          @if $breakpoint-shortcut {
            .g-half--#{$breakpoint-shortcut} { @extend #{$selector}; }
          }
        }
      }
      @else { // generic sizes

        // generate the entire selector, in this only the proportion
        $selector: $selector-base;

        // Generate the rule
        #{$selector} { width: fraction($j of $i); }

        // 2 more readable sizes (.g-all and .g-half)
        @if $i == 1 and $j == 1 {
          .g-all { @extend #{$selector}; }
        }
        @if $j == 1 and $i == 2 {
          .g-half { @extend #{$selector}; }
        }

      }
    }
  }

}

// Generates all the sizes and mediaqueries
// =========================================================================
@mixin build-responsive-sizes() {
  @for $i from 1 through length($breakpoints) {
    $breakpoint-prop: nth($breakpoints, $i); // positions: name, shortcut and mediaquery
    $breakpoint-name: nth($breakpoint-prop, 1);

    /* Breakpoint: #{$breakpoint-name} */
    @include mediaquery($i) {
      @include build-sizes($breakpoint-name);
    }
  }

  /* Default widths */
  @include build-sizes();
}

// Generates all the offsets
// =========================================================================
@mixin build-offsets($where) { // $where: before or after

}
